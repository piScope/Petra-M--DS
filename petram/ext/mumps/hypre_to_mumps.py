# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hypre_to_mumps', [dirname(__file__)])
        except ImportError:
            import _hypre_to_mumps
            return _hypre_to_mumps
        if fp is not None:
            try:
                _mod = imp.load_module('_hypre_to_mumps', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hypre_to_mumps = swig_import_helper()
    del swig_import_helper
else:
    import _hypre_to_mumps
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class mumps_complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mumps_complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mumps_complex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _hypre_to_mumps.mumps_complex_r_set
    __swig_getmethods__["r"] = _hypre_to_mumps.mumps_complex_r_get
    if _newclass:
        r = _swig_property(_hypre_to_mumps.mumps_complex_r_get, _hypre_to_mumps.mumps_complex_r_set)
    __swig_setmethods__["i"] = _hypre_to_mumps.mumps_complex_i_set
    __swig_getmethods__["i"] = _hypre_to_mumps.mumps_complex_i_get
    if _newclass:
        i = _swig_property(_hypre_to_mumps.mumps_complex_i_get, _hypre_to_mumps.mumps_complex_i_set)

    def __init__(self):
        this = _hypre_to_mumps.new_mumps_complex()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hypre_to_mumps.delete_mumps_complex
    __del__ = lambda self: None
mumps_complex_swigregister = _hypre_to_mumps.mumps_complex_swigregister
mumps_complex_swigregister(mumps_complex)

class mumps_double_complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mumps_double_complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mumps_double_complex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _hypre_to_mumps.mumps_double_complex_r_set
    __swig_getmethods__["r"] = _hypre_to_mumps.mumps_double_complex_r_get
    if _newclass:
        r = _swig_property(_hypre_to_mumps.mumps_double_complex_r_get, _hypre_to_mumps.mumps_double_complex_r_set)
    __swig_setmethods__["i"] = _hypre_to_mumps.mumps_double_complex_i_set
    __swig_getmethods__["i"] = _hypre_to_mumps.mumps_double_complex_i_get
    if _newclass:
        i = _swig_property(_hypre_to_mumps.mumps_double_complex_i_get, _hypre_to_mumps.mumps_double_complex_i_set)

    def __init__(self):
        this = _hypre_to_mumps.new_mumps_double_complex()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hypre_to_mumps.delete_mumps_double_complex
    __del__ = lambda self: None
mumps_double_complex_swigregister = _hypre_to_mumps.mumps_double_complex_swigregister
mumps_double_complex_swigregister(mumps_double_complex)


_hypre_to_mumps.MUMPS_ARITH_s_swigconstant(_hypre_to_mumps)
MUMPS_ARITH_s = _hypre_to_mumps.MUMPS_ARITH_s

_hypre_to_mumps.MUMPS_ARITH_d_swigconstant(_hypre_to_mumps)
MUMPS_ARITH_d = _hypre_to_mumps.MUMPS_ARITH_d

_hypre_to_mumps.MUMPS_ARITH_c_swigconstant(_hypre_to_mumps)
MUMPS_ARITH_c = _hypre_to_mumps.MUMPS_ARITH_c

_hypre_to_mumps.MUMPS_ARITH_z_swigconstant(_hypre_to_mumps)
MUMPS_ARITH_z = _hypre_to_mumps.MUMPS_ARITH_z

_hypre_to_mumps.MUMPS_ARITH_REAL_swigconstant(_hypre_to_mumps)
MUMPS_ARITH_REAL = _hypre_to_mumps.MUMPS_ARITH_REAL

_hypre_to_mumps.MUMPS_ARITH_CMPLX_swigconstant(_hypre_to_mumps)
MUMPS_ARITH_CMPLX = _hypre_to_mumps.MUMPS_ARITH_CMPLX

_hypre_to_mumps.MUMPS_ARITH_SINGLE_swigconstant(_hypre_to_mumps)
MUMPS_ARITH_SINGLE = _hypre_to_mumps.MUMPS_ARITH_SINGLE

_hypre_to_mumps.MUMPS_ARITH_DBL_swigconstant(_hypre_to_mumps)
MUMPS_ARITH_DBL = _hypre_to_mumps.MUMPS_ARITH_DBL
class PyMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyMatrix, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hypre_to_mumps.delete_PyMatrix
    __del__ = lambda self: None

    def TrueNNZ(self):
        return _hypre_to_mumps.PyMatrix_TrueNNZ(self)

    def NNZ(self):
        return _hypre_to_mumps.PyMatrix_NNZ(self)

    def N(self):
        return _hypre_to_mumps.PyMatrix_N(self)

    def M(self):
        return _hypre_to_mumps.PyMatrix_M(self)

    def get_major(self):
        return _hypre_to_mumps.PyMatrix_get_major(self)

    def set_major(self, m):
        return _hypre_to_mumps.PyMatrix_set_major(self, m)

    def get_irn(self, i):
        return _hypre_to_mumps.PyMatrix_get_irn(self, i)

    def get_jcn(self, i):
        return _hypre_to_mumps.PyMatrix_get_jcn(self, i)

    def is_complex(self):
        return _hypre_to_mumps.PyMatrix_is_complex(self)

    def get_real_data_p(self, i):
        return _hypre_to_mumps.PyMatrix_get_real_data_p(self, i)

    def get_imag_data_p(self, i):
        return _hypre_to_mumps.PyMatrix_get_imag_data_p(self, i)

    def set_coo(self, irn0, jcn0):
        return _hypre_to_mumps.PyMatrix_set_coo(self, irn0, jcn0)

    def set_jcn(self, jcn0):

        import numpy as np
        try:
           if not args[0].flags.contiguous:
              print('non contiguous array was passed')
              args = (np.ascontiguousarray(args[0], dtype = int),)
        except:
            pass


        return _hypre_to_mumps.PyMatrix_set_jcn(self, jcn0)


    def set_irn(self, irn0):

        import numpy as np
        try:
           if not args[0].flags.contiguous:
              print('non contiguous array was passed')
              args = (np.ascontiguousarray(args[0],dtype = int),)
        except:
            pass


        return _hypre_to_mumps.PyMatrix_set_irn(self, irn0)


    def get_index(self, r, c):
        return _hypre_to_mumps.PyMatrix_get_index(self, r, c)

    def print_info(self):
        return _hypre_to_mumps.PyMatrix_print_info(self)

    def isTrueNNZ(self, i):
        return _hypre_to_mumps.PyMatrix_isTrueNNZ(self, i)

    def set_data(self, data0, i):
        return _hypre_to_mumps.PyMatrix_set_data(self, data0, i)

    def set_row(self, pdata, r):
        return _hypre_to_mumps.PyMatrix_set_row(self, pdata, r)

    def set_col(self, pdata, c):
        return _hypre_to_mumps.PyMatrix_set_col(self, pdata, c)
PyMatrix_swigregister = _hypre_to_mumps.PyMatrix_swigregister
PyMatrix_swigregister(PyMatrix)

class PyEmptyMatrix(PyMatrix):
    __swig_setmethods__ = {}
    for _s in [PyMatrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyEmptyMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [PyMatrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyEmptyMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, nrow, ncol, nnz=0, cmajor=0):
        this = _hypre_to_mumps.new_PyEmptyMatrix(nrow, ncol, nnz, cmajor)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hypre_to_mumps.delete_PyEmptyMatrix
    __del__ = lambda self: None

    def is_complex(self):
        return _hypre_to_mumps.PyEmptyMatrix_is_complex(self)

    def isTrueNNZ(self, i):
        return _hypre_to_mumps.PyEmptyMatrix_isTrueNNZ(self, i)

    def set_data(self, data0, i):
        return _hypre_to_mumps.PyEmptyMatrix_set_data(self, data0, i)
PyEmptyMatrix_swigregister = _hypre_to_mumps.PyEmptyMatrix_swigregister
PyEmptyMatrix_swigregister(PyEmptyMatrix)

class PyDMatrix(PyMatrix):
    __swig_setmethods__ = {}
    for _s in [PyMatrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyDMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [PyMatrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyDMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, nrow, ncol, nnz=0, cmajor=0):
        this = _hypre_to_mumps.new_PyDMatrix(nrow, ncol, nnz, cmajor)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hypre_to_mumps.delete_PyDMatrix
    __del__ = lambda self: None

    def is_complex(self):
        return _hypre_to_mumps.PyDMatrix_is_complex(self)

    def get_real_data_p(self, i):
        return _hypre_to_mumps.PyDMatrix_get_real_data_p(self, i)

    def get_imag_data_p(self, i):
        return _hypre_to_mumps.PyDMatrix_get_imag_data_p(self, i)

    def set_data(self, *args):
        return _hypre_to_mumps.PyDMatrix_set_data(self, *args)

    def isTrueNNZ(self, i):
        return _hypre_to_mumps.PyDMatrix_isTrueNNZ(self, i)
PyDMatrix_swigregister = _hypre_to_mumps.PyDMatrix_swigregister
PyDMatrix_swigregister(PyDMatrix)

class PyZMatrix(PyMatrix):
    __swig_setmethods__ = {}
    for _s in [PyMatrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyZMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [PyMatrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyZMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, nrow, ncol, nnz=0, cmajor=0):
        this = _hypre_to_mumps.new_PyZMatrix(nrow, ncol, nnz, cmajor)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hypre_to_mumps.delete_PyZMatrix
    __del__ = lambda self: None

    def is_complex(self):
        return _hypre_to_mumps.PyZMatrix_is_complex(self)

    def get_real_data_p(self, i):
        return _hypre_to_mumps.PyZMatrix_get_real_data_p(self, i)

    def get_imag_data_p(self, i):
        return _hypre_to_mumps.PyZMatrix_get_imag_data_p(self, i)

    def set_data(self, *args):
        return _hypre_to_mumps.PyZMatrix_set_data(self, *args)

    def set_rdata(self, *args):

        import numpy as np
        try:
           if not args[0].flags.contiguous:
              print('non contiguous array was passed')
              args = (np.ascontiguousarray(args[0]),)
        except:
            pass


        return _hypre_to_mumps.PyZMatrix_set_rdata(self, *args)


    def set_idata(self, *args):

        import numpy as np
        try:
           if not args[0].flags.contiguous:
              print('non contiguous array was passed')
              args = (np.ascontiguousarray(args[0]),)
        except:
           pass


        return _hypre_to_mumps.PyZMatrix_set_idata(self, *args)


    def set_col(self, rdata, idata, c):
        return _hypre_to_mumps.PyZMatrix_set_col(self, rdata, idata, c)

    def set_row(self, rdata, idata, r):
        return _hypre_to_mumps.PyZMatrix_set_row(self, rdata, idata, r)

    def isTrueNNZ(self, i):
        return _hypre_to_mumps.PyZMatrix_isTrueNNZ(self, i)

    def Print(self):
        return _hypre_to_mumps.PyZMatrix_Print(self)

    def PrintNNZ(self):
        return _hypre_to_mumps.PyZMatrix_PrintNNZ(self)
PyZMatrix_swigregister = _hypre_to_mumps.PyZMatrix_swigregister
PyZMatrix_swigregister(PyZMatrix)

class MUMPS_LOC_Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MUMPS_LOC_Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MUMPS_LOC_Matrix, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hypre_to_mumps.delete_MUMPS_LOC_Matrix
    __del__ = lambda self: None

    def NNZ(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_NNZ(self)

    def N(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_N(self)

    def M(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_M(self)

    def Comm(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_Comm(self)

    def add_real_hypre_matrix(self, matrix, i):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_add_real_hypre_matrix(self, matrix, i)

    def add_imag_hypre_matrix(self, matrix, i):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_add_imag_hypre_matrix(self, matrix, i)

    def add_py_matrix(self, matrix, i):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_add_py_matrix(self, matrix, i)

    def share_py_matrix_info(self, i, rank):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_share_py_matrix_info(self, i, rank)

    def assemble(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_assemble(self)

    def assemble_new(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_assemble_new(self)

    def assemble_from_hypre(self, rmatrix, imatrix, inz, base_i, base_j, index):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_assemble_from_hypre(self, rmatrix, imatrix, inz, base_i, base_j, index)

    def assemble_from_hypre_new(self, *args):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_assemble_from_hypre_new(self, *args)

    def assemble_from_py(self, m, innz, base_i, base_j):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_assemble_from_py(self, m, innz, base_i, base_j)

    def allocate_data(self, nnz):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_allocate_data(self, nnz)

    def allocate_irn(self, nnz):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_allocate_irn(self, nnz)

    def allocate_jcn(self, nnz):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_allocate_jcn(self, nnz)

    def set_data(self, v, I, J, inz):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_set_data(self, v, I, J, inz)

    def set_data_imag(self, v, I, J, inz):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_set_data_imag(self, v, I, J, inz)

    def get_irn(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_get_irn(self)

    def get_jcn(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_get_jcn(self)

    def set_irn(self, idx, v):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_set_irn(self, idx, v)

    def set_jcn(self, idx, v):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_set_jcn(self, idx, v)

    def get_pymatrix(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_get_pymatrix(self)

    def set_mtype(self, idx, v):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_set_mtype(self, idx, v)

    def get_mtype(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_get_mtype(self)

    def get_ntile(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_get_ntile(self)

    def print_info(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_print_info(self)

    def print_data(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_print_data(self)

    def save_data(self, filename):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_save_data(self, filename)

    def ToString(self, i):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_ToString(self, i)

    def isComplex(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_isComplex(self)

    def isAssembled(self):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_isAssembled(self)

    def nnz_complex_hypre(self, rmatrix, imatrix, base_i, base_j):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_nnz_complex_hypre(self, rmatrix, imatrix, base_i, base_j)

    def union_i_len(self, j_array, j_array2, num1, num2):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_union_i_len(self, j_array, j_array2, num1, num2)

    def get_row_data(self, i, first_row_index, first_col_diag, diag_i, diag_j, offd_i, offd_j, col_map_offd, diag_data, offd_data, base_i, base_j, j_array, d_array):
        return _hypre_to_mumps.MUMPS_LOC_Matrix_get_row_data(self, i, first_row_index, first_col_diag, diag_i, diag_j, offd_i, offd_j, col_map_offd, diag_data, offd_data, base_i, base_j, j_array, d_array)
MUMPS_LOC_Matrix_swigregister = _hypre_to_mumps.MUMPS_LOC_Matrix_swigregister
MUMPS_LOC_Matrix_swigregister(MUMPS_LOC_Matrix)

class DMUMPS_LOC_Matrix(MUMPS_LOC_Matrix):
    __swig_setmethods__ = {}
    for _s in [MUMPS_LOC_Matrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMUMPS_LOC_Matrix, name, value)
    __swig_getmethods__ = {}
    for _s in [MUMPS_LOC_Matrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMUMPS_LOC_Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, comm, m, n):
        this = _hypre_to_mumps.new_DMUMPS_LOC_Matrix(comm, m, n)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hypre_to_mumps.delete_DMUMPS_LOC_Matrix
    __del__ = lambda self: None

    def add_py_matrix(self, matrix, i):
        return _hypre_to_mumps.DMUMPS_LOC_Matrix_add_py_matrix(self, matrix, i)

    def allocate_data(self, nnz):
        return _hypre_to_mumps.DMUMPS_LOC_Matrix_allocate_data(self, nnz)

    def set_data(self, v, I, J, inz):
        return _hypre_to_mumps.DMUMPS_LOC_Matrix_set_data(self, v, I, J, inz)

    def get_pymatrix(self):
        return _hypre_to_mumps.DMUMPS_LOC_Matrix_get_pymatrix(self)

    def get_data(self):
        return _hypre_to_mumps.DMUMPS_LOC_Matrix_get_data(self)

    def ToString(self, i):
        return _hypre_to_mumps.DMUMPS_LOC_Matrix_ToString(self, i)

    def isComplex(self):
        return _hypre_to_mumps.DMUMPS_LOC_Matrix_isComplex(self)
DMUMPS_LOC_Matrix_swigregister = _hypre_to_mumps.DMUMPS_LOC_Matrix_swigregister
DMUMPS_LOC_Matrix_swigregister(DMUMPS_LOC_Matrix)

class ZMUMPS_LOC_Matrix(MUMPS_LOC_Matrix):
    __swig_setmethods__ = {}
    for _s in [MUMPS_LOC_Matrix]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZMUMPS_LOC_Matrix, name, value)
    __swig_getmethods__ = {}
    for _s in [MUMPS_LOC_Matrix]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZMUMPS_LOC_Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, comm, m, n):
        this = _hypre_to_mumps.new_ZMUMPS_LOC_Matrix(comm, m, n)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hypre_to_mumps.delete_ZMUMPS_LOC_Matrix
    __del__ = lambda self: None

    def add_py_matrix(self, matrix, i):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_add_py_matrix(self, matrix, i)

    def allocate_data(self, nnz):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_allocate_data(self, nnz)

    def set_data(self, v, I, J, inz):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_set_data(self, v, I, J, inz)

    def set_data_imag(self, v, I, J, inz):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_set_data_imag(self, v, I, J, inz)

    def get_pymatrix(self):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_get_pymatrix(self)

    def get_data(self):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_get_data(self)

    def ToString(self, i):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_ToString(self, i)

    def ToCSR(self):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_ToCSR(self)

    def isComplex(self):
        return _hypre_to_mumps.ZMUMPS_LOC_Matrix_isComplex(self)
ZMUMPS_LOC_Matrix_swigregister = _hypre_to_mumps.ZMUMPS_LOC_Matrix_swigregister
ZMUMPS_LOC_Matrix_swigregister(ZMUMPS_LOC_Matrix)


def form_mumps_local_d_array_simple(pmatrix, base_i, base_j):
    return _hypre_to_mumps.form_mumps_local_d_array_simple(pmatrix, base_i, base_j)
form_mumps_local_d_array_simple = _hypre_to_mumps.form_mumps_local_d_array_simple

def get_local_nnz(pmatrix):
    return _hypre_to_mumps.get_local_nnz(pmatrix)
get_local_nnz = _hypre_to_mumps.get_local_nnz

def check_nz(pmatrix, search_i, serach_j):
    return _hypre_to_mumps.check_nz(pmatrix, search_i, serach_j)
check_nz = _hypre_to_mumps.check_nz

def sum_nnz(pmatrix, pmatrix2, index):
    return _hypre_to_mumps.sum_nnz(pmatrix, pmatrix2, index)
sum_nnz = _hypre_to_mumps.sum_nnz

def get_HypreParMatrixRow(rmatrix, i):
    return _hypre_to_mumps.get_HypreParMatrixRow(rmatrix, i)
get_HypreParMatrixRow = _hypre_to_mumps.get_HypreParMatrixRow

def print_HYPRE_matrix_info(pmatrix):
    return _hypre_to_mumps.print_HYPRE_matrix_info(pmatrix)
print_HYPRE_matrix_info = _hypre_to_mumps.print_HYPRE_matrix_info

def get_true_local_nnz(pmatrix):
    return _hypre_to_mumps.get_true_local_nnz(pmatrix)
get_true_local_nnz = _hypre_to_mumps.get_true_local_nnz

def argsort(ptr, len, res):
    return _hypre_to_mumps.argsort(ptr, len, res)
argsort = _hypre_to_mumps.argsort

def to_string(i):
    return _hypre_to_mumps.to_string(i)
to_string = _hypre_to_mumps.to_string

def to_stringf(f):
    return _hypre_to_mumps.to_stringf(f)
to_stringf = _hypre_to_mumps.to_stringf
# This file is compatible with both classic and new-style classes.


