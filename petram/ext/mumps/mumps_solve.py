# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mumps_solve', [dirname(__file__)])
        except ImportError:
            import _mumps_solve
            return _mumps_solve
        if fp is not None:
            try:
                _mod = imp.load_module('_mumps_solve', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mumps_solve = swig_import_helper()
    del swig_import_helper
else:
    import _mumps_solve
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class mumps_complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mumps_complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mumps_complex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _mumps_solve.mumps_complex_r_set
    __swig_getmethods__["r"] = _mumps_solve.mumps_complex_r_get
    if _newclass:
        r = _swig_property(_mumps_solve.mumps_complex_r_get, _mumps_solve.mumps_complex_r_set)
    __swig_setmethods__["i"] = _mumps_solve.mumps_complex_i_set
    __swig_getmethods__["i"] = _mumps_solve.mumps_complex_i_get
    if _newclass:
        i = _swig_property(_mumps_solve.mumps_complex_i_get, _mumps_solve.mumps_complex_i_set)

    def __init__(self):
        this = _mumps_solve.new_mumps_complex()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mumps_solve.delete_mumps_complex
    __del__ = lambda self: None
mumps_complex_swigregister = _mumps_solve.mumps_complex_swigregister
mumps_complex_swigregister(mumps_complex)

class mumps_double_complex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mumps_double_complex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mumps_double_complex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _mumps_solve.mumps_double_complex_r_set
    __swig_getmethods__["r"] = _mumps_solve.mumps_double_complex_r_get
    if _newclass:
        r = _swig_property(_mumps_solve.mumps_double_complex_r_get, _mumps_solve.mumps_double_complex_r_set)
    __swig_setmethods__["i"] = _mumps_solve.mumps_double_complex_i_set
    __swig_getmethods__["i"] = _mumps_solve.mumps_double_complex_i_get
    if _newclass:
        i = _swig_property(_mumps_solve.mumps_double_complex_i_get, _mumps_solve.mumps_double_complex_i_set)

    def __init__(self):
        this = _mumps_solve.new_mumps_double_complex()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mumps_solve.delete_mumps_double_complex
    __del__ = lambda self: None
mumps_double_complex_swigregister = _mumps_solve.mumps_double_complex_swigregister
mumps_double_complex_swigregister(mumps_double_complex)


_mumps_solve.MUMPS_ARITH_s_swigconstant(_mumps_solve)
MUMPS_ARITH_s = _mumps_solve.MUMPS_ARITH_s

_mumps_solve.MUMPS_ARITH_d_swigconstant(_mumps_solve)
MUMPS_ARITH_d = _mumps_solve.MUMPS_ARITH_d

_mumps_solve.MUMPS_ARITH_c_swigconstant(_mumps_solve)
MUMPS_ARITH_c = _mumps_solve.MUMPS_ARITH_c

_mumps_solve.MUMPS_ARITH_z_swigconstant(_mumps_solve)
MUMPS_ARITH_z = _mumps_solve.MUMPS_ARITH_z

_mumps_solve.MUMPS_ARITH_REAL_swigconstant(_mumps_solve)
MUMPS_ARITH_REAL = _mumps_solve.MUMPS_ARITH_REAL

_mumps_solve.MUMPS_ARITH_CMPLX_swigconstant(_mumps_solve)
MUMPS_ARITH_CMPLX = _mumps_solve.MUMPS_ARITH_CMPLX

_mumps_solve.MUMPS_ARITH_SINGLE_swigconstant(_mumps_solve)
MUMPS_ARITH_SINGLE = _mumps_solve.MUMPS_ARITH_SINGLE

_mumps_solve.MUMPS_ARITH_DBL_swigconstant(_mumps_solve)
MUMPS_ARITH_DBL = _mumps_solve.MUMPS_ARITH_DBL

_mumps_solve.JOB_INIT_swigconstant(_mumps_solve)
JOB_INIT = _mumps_solve.JOB_INIT

_mumps_solve.JOB_END_swigconstant(_mumps_solve)
JOB_END = _mumps_solve.JOB_END

_mumps_solve.JOB_ANALYSIS_swigconstant(_mumps_solve)
JOB_ANALYSIS = _mumps_solve.JOB_ANALYSIS

_mumps_solve.JOB_FACTORIZATION_swigconstant(_mumps_solve)
JOB_FACTORIZATION = _mumps_solve.JOB_FACTORIZATION

_mumps_solve.JOB_SOLVE_swigconstant(_mumps_solve)
JOB_SOLVE = _mumps_solve.JOB_SOLVE

_mumps_solve.JOB_1_2_swigconstant(_mumps_solve)
JOB_1_2 = _mumps_solve.JOB_1_2

_mumps_solve.JOB_2_3_swigconstant(_mumps_solve)
JOB_2_3 = _mumps_solve.JOB_2_3

_mumps_solve.JOB_1_2_3_swigconstant(_mumps_solve)
JOB_1_2_3 = _mumps_solve.JOB_1_2_3

_mumps_solve.USE_COMM_WORLD_swigconstant(_mumps_solve)
USE_COMM_WORLD = _mumps_solve.USE_COMM_WORLD
class DMUMPS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMUMPS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMUMPS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mumps_solve.new_DMUMPS(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mumps_solve.delete_DMUMPS
    __del__ = lambda self: None

    def run(self):
        return _mumps_solve.DMUMPS_run(self)

    def finish(self):
        return _mumps_solve.DMUMPS_finish(self)

    def set_cntl(self, i, v):
        return _mumps_solve.DMUMPS_set_cntl(self, i, v)

    def set_icntl(self, i, v):
        return _mumps_solve.DMUMPS_set_icntl(self, i, v)

    def get_cntl(self, i):
        return _mumps_solve.DMUMPS_get_cntl(self, i)

    def get_icntl(self, i):
        return _mumps_solve.DMUMPS_get_icntl(self, i)

    def set_job(self, n):
        return _mumps_solve.DMUMPS_set_job(self, n)

    def set_n(self, n):
        return _mumps_solve.DMUMPS_set_n(self, n)

    def set_nz(self, nz):
        return _mumps_solve.DMUMPS_set_nz(self, nz)

    def set_irn(self, irn):
        return _mumps_solve.DMUMPS_set_irn(self, irn)

    def set_jcn(self, jcn):
        return _mumps_solve.DMUMPS_set_jcn(self, jcn)

    def set_nz_loc(self, nz):
        return _mumps_solve.DMUMPS_set_nz_loc(self, nz)

    def set_irn_loc(self, irn):
        return _mumps_solve.DMUMPS_set_irn_loc(self, irn)

    def set_jcn_loc(self, jcn):
        return _mumps_solve.DMUMPS_set_jcn_loc(self, jcn)

    def set_a(self, a):
        return _mumps_solve.DMUMPS_set_a(self, a)

    def set_a_loc(self, a):
        return _mumps_solve.DMUMPS_set_a_loc(self, a)

    def set_rhs(self, rhs):
        return _mumps_solve.DMUMPS_set_rhs(self, rhs)

    def set_lrhs_nrhs(self, lrhs, nrhs):
        return _mumps_solve.DMUMPS_set_lrhs_nrhs(self, lrhs, nrhs)

    def get_rhs(self):
        return _mumps_solve.DMUMPS_get_rhs(self)

    def set_ictrl(self, i):
        return _mumps_solve.DMUMPS_set_ictrl(self, i)

    def get_struct(self):
        return _mumps_solve.DMUMPS_get_struct(self)

    def get_real_rhs(self):
        return _mumps_solve.DMUMPS_get_real_rhs(self)
DMUMPS_swigregister = _mumps_solve.DMUMPS_swigregister
DMUMPS_swigregister(DMUMPS)

class ZMUMPS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZMUMPS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZMUMPS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mumps_solve.new_ZMUMPS(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mumps_solve.delete_ZMUMPS
    __del__ = lambda self: None

    def run(self):
        return _mumps_solve.ZMUMPS_run(self)

    def finish(self):
        return _mumps_solve.ZMUMPS_finish(self)

    def set_cntl(self, i, v):
        return _mumps_solve.ZMUMPS_set_cntl(self, i, v)

    def set_icntl(self, i, v):
        return _mumps_solve.ZMUMPS_set_icntl(self, i, v)

    def get_cntl(self, i):
        return _mumps_solve.ZMUMPS_get_cntl(self, i)

    def get_icntl(self, i):
        return _mumps_solve.ZMUMPS_get_icntl(self, i)

    def set_job(self, n):
        return _mumps_solve.ZMUMPS_set_job(self, n)

    def set_n(self, n):
        return _mumps_solve.ZMUMPS_set_n(self, n)

    def set_nz(self, nz):
        return _mumps_solve.ZMUMPS_set_nz(self, nz)

    def set_irn(self, irn):
        return _mumps_solve.ZMUMPS_set_irn(self, irn)

    def set_jcn(self, jcn):
        return _mumps_solve.ZMUMPS_set_jcn(self, jcn)

    def set_nz_loc(self, nz):
        return _mumps_solve.ZMUMPS_set_nz_loc(self, nz)

    def set_irn_loc(self, irn):
        return _mumps_solve.ZMUMPS_set_irn_loc(self, irn)

    def set_jcn_loc(self, jcn):
        return _mumps_solve.ZMUMPS_set_jcn_loc(self, jcn)

    def set_a(self, a):
        return _mumps_solve.ZMUMPS_set_a(self, a)

    def set_a_loc(self, a):
        return _mumps_solve.ZMUMPS_set_a_loc(self, a)

    def set_rhs(self, rhs):
        return _mumps_solve.ZMUMPS_set_rhs(self, rhs)

    def set_lrhs_nrhs(self, lrhs, nrhs):
        return _mumps_solve.ZMUMPS_set_lrhs_nrhs(self, lrhs, nrhs)

    def get_rhs(self):
        return _mumps_solve.ZMUMPS_get_rhs(self)

    def set_ictrl(self, i):
        return _mumps_solve.ZMUMPS_set_ictrl(self, i)

    def get_struct(self):
        return _mumps_solve.ZMUMPS_get_struct(self)

    def get_real_rhs(self):
        return _mumps_solve.ZMUMPS_get_real_rhs(self)

    def get_imag_rhs(self):
        return _mumps_solve.ZMUMPS_get_imag_rhs(self)
ZMUMPS_swigregister = _mumps_solve.ZMUMPS_swigregister
ZMUMPS_swigregister(ZMUMPS)

class SMUMPS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMUMPS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMUMPS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mumps_solve.new_SMUMPS(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mumps_solve.delete_SMUMPS
    __del__ = lambda self: None

    def run(self):
        return _mumps_solve.SMUMPS_run(self)

    def finish(self):
        return _mumps_solve.SMUMPS_finish(self)

    def set_icntl(self, i, v):
        return _mumps_solve.SMUMPS_set_icntl(self, i, v)

    def get_icntl(self, i):
        return _mumps_solve.SMUMPS_get_icntl(self, i)

    def set_job(self, n):
        return _mumps_solve.SMUMPS_set_job(self, n)

    def set_n(self, n):
        return _mumps_solve.SMUMPS_set_n(self, n)

    def set_nz(self, nz):
        return _mumps_solve.SMUMPS_set_nz(self, nz)

    def set_irn(self, irn):
        return _mumps_solve.SMUMPS_set_irn(self, irn)

    def set_jcn(self, jcn):
        return _mumps_solve.SMUMPS_set_jcn(self, jcn)

    def set_nz_loc(self, nz):
        return _mumps_solve.SMUMPS_set_nz_loc(self, nz)

    def set_irn_loc(self, irn):
        return _mumps_solve.SMUMPS_set_irn_loc(self, irn)

    def set_jcn_loc(self, jcn):
        return _mumps_solve.SMUMPS_set_jcn_loc(self, jcn)

    def set_a(self, a):
        return _mumps_solve.SMUMPS_set_a(self, a)

    def set_a_loc(self, a):
        return _mumps_solve.SMUMPS_set_a_loc(self, a)

    def set_rhs(self, rhs):
        return _mumps_solve.SMUMPS_set_rhs(self, rhs)

    def set_lrhs_nrhs(self, lrhs, nrhs):
        return _mumps_solve.SMUMPS_set_lrhs_nrhs(self, lrhs, nrhs)

    def get_rhs(self):
        return _mumps_solve.SMUMPS_get_rhs(self)

    def set_ictrl(self, i):
        return _mumps_solve.SMUMPS_set_ictrl(self, i)

    def get_struct(self):
        return _mumps_solve.SMUMPS_get_struct(self)
SMUMPS_swigregister = _mumps_solve.SMUMPS_swigregister
SMUMPS_swigregister(SMUMPS)

class CMUMPS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMUMPS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMUMPS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mumps_solve.new_CMUMPS(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mumps_solve.delete_CMUMPS
    __del__ = lambda self: None

    def run(self):
        return _mumps_solve.CMUMPS_run(self)

    def finish(self):
        return _mumps_solve.CMUMPS_finish(self)

    def set_icntl(self, i, v):
        return _mumps_solve.CMUMPS_set_icntl(self, i, v)

    def get_icntl(self, i):
        return _mumps_solve.CMUMPS_get_icntl(self, i)

    def set_job(self, n):
        return _mumps_solve.CMUMPS_set_job(self, n)

    def set_n(self, n):
        return _mumps_solve.CMUMPS_set_n(self, n)

    def set_nz(self, nz):
        return _mumps_solve.CMUMPS_set_nz(self, nz)

    def set_irn(self, irn):
        return _mumps_solve.CMUMPS_set_irn(self, irn)

    def set_jcn(self, jcn):
        return _mumps_solve.CMUMPS_set_jcn(self, jcn)

    def set_nz_loc(self, nz):
        return _mumps_solve.CMUMPS_set_nz_loc(self, nz)

    def set_irn_loc(self, irn):
        return _mumps_solve.CMUMPS_set_irn_loc(self, irn)

    def set_jcn_loc(self, jcn):
        return _mumps_solve.CMUMPS_set_jcn_loc(self, jcn)

    def set_a(self, a):
        return _mumps_solve.CMUMPS_set_a(self, a)

    def set_a_loc(self, a):
        return _mumps_solve.CMUMPS_set_a_loc(self, a)

    def set_rhs(self, rhs):
        return _mumps_solve.CMUMPS_set_rhs(self, rhs)

    def set_lrhs_nrhs(self, lrhs, nrhs):
        return _mumps_solve.CMUMPS_set_lrhs_nrhs(self, lrhs, nrhs)

    def get_rhs(self):
        return _mumps_solve.CMUMPS_get_rhs(self)

    def set_ictrl(self, i):
        return _mumps_solve.CMUMPS_set_ictrl(self, i)

    def get_struct(self):
        return _mumps_solve.CMUMPS_get_struct(self)
CMUMPS_swigregister = _mumps_solve.CMUMPS_swigregister
CMUMPS_swigregister(CMUMPS)


def example_dist(comm):
    return _mumps_solve.example_dist(comm)
example_dist = _mumps_solve.example_dist

def example(comm):
    return _mumps_solve.example(comm)
example = _mumps_solve.example

def SIZEOF_MUMPS_INT():
    return _mumps_solve.SIZEOF_MUMPS_INT()
SIZEOF_MUMPS_INT = _mumps_solve.SIZEOF_MUMPS_INT

def i_array(arr):
    return _mumps_solve.i_array(arr)
i_array = _mumps_solve.i_array

def s_array(arr):
    return _mumps_solve.s_array(arr)
s_array = _mumps_solve.s_array

def d_array(arr):
    return _mumps_solve.d_array(arr)
d_array = _mumps_solve.d_array

def c_array(arr):
    return _mumps_solve.c_array(arr)
c_array = _mumps_solve.c_array

def z_array(arr):
    return _mumps_solve.z_array(arr)
z_array = _mumps_solve.z_array

def c_real_array(arr):
    return _mumps_solve.c_real_array(arr)
c_real_array = _mumps_solve.c_real_array

def z_real_array(arr):
    return _mumps_solve.z_real_array(arr)
z_real_array = _mumps_solve.z_real_array

def i_array_getitem(arr, i):
    return _mumps_solve.i_array_getitem(arr, i)
i_array_getitem = _mumps_solve.i_array_getitem

def d_array_getitem(arr, i):
    return _mumps_solve.d_array_getitem(arr, i)
d_array_getitem = _mumps_solve.d_array_getitem

def s_array_getitem(arr, i):
    return _mumps_solve.s_array_getitem(arr, i)
s_array_getitem = _mumps_solve.s_array_getitem

def z_array_real_getitem(arr, i):
    return _mumps_solve.z_array_real_getitem(arr, i)
z_array_real_getitem = _mumps_solve.z_array_real_getitem

def c_array_real_getitem(arr, i):
    return _mumps_solve.c_array_real_getitem(arr, i)
c_array_real_getitem = _mumps_solve.c_array_real_getitem

def z_array_imag_getitem(arr, i):
    return _mumps_solve.z_array_imag_getitem(arr, i)
z_array_imag_getitem = _mumps_solve.z_array_imag_getitem

def c_array_imag_getitem(arr, i):
    return _mumps_solve.c_array_imag_getitem(arr, i)
c_array_imag_getitem = _mumps_solve.c_array_imag_getitem

def i_to_list(A, l):
    return [i_array_getitem(A, i) for i in range(l)]
def d_to_list(A, l):
    return [d_array_getitem(A, i) for i in range(l)]
def s_to_list(A, l):
    return [s_array_getitem(A, i) for i in range(l)]
def c_to_list(A, l):
    return [c_array_real_getitem(A, i) +
	    1j* c_array_imag_getitem(A, i) for i in range(l)]
def z_to_list(A, l):
    return [z_array_real_getitem(A, i) +
	    1j* z_array_imag_getitem(A, i) for i in range(l)]        

# This file is compatible with both classic and new-style classes.


